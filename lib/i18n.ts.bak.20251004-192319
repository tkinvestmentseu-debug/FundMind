export type Lang = 'pl' | 'en';
export const t = (lang: Lang, key: string) => {
  const dict: Record<string, Record<string,string>> = {
    pl: { calendar:'Kalendarz',language:'Język',polish:'Polski',english:'Angielski',date:'Data',time:'Czas',year:'Rok',month:'Miesiąc',day:'Dzień',hour:'Godzina',minute:'Minuta',reset:'Reset',confirm:'Zatwierdź',openNativeDate:'Wybierz datę',openNativeTime:'Wybierz czas',selected:'Wybrano'},
    en: { calendar:'Calendar',language:'Language',polish:'Polish',english:'English',date:'Date',time:'Time',year:'Year',month:'Month',day:'Day',hour:'Hour',minute:'Minute',reset:'Reset',confirm:'Confirm',openNativeDate:'Pick date',openNativeTime:'Pick time',selected:'Selected'}
  };
  const l = dict[lang] ?? dict['pl'];
  return l[key] ?? key;
};

//
// === FundMind L helper (idempotent) ===
export type Lang = 'pl' | 'en';
export function getLang(): Lang {
  try {
    // Prefer i18next if present
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const g: any = global as any;
    const i18nFromGlobal = g?.i18n?.language;
    let i18nFromModule: string | undefined;
    try {
      // optional require to avoid import cycles
      // eslint-disable-next-line @typescript-eslint/no-var-requires
      const m = require('./i18n');
      const maybeDefault = (m && m.default) ? m.default : m;
      i18nFromModule = maybeDefault?.language;
    } catch {}
    const lang = i18nFromGlobal ?? i18nFromModule ?? 'en';
    return (String(lang).toLowerCase().startsWith('pl')) ? 'pl' : 'en';
  } catch {
    return 'en';
  }
}
export function L(pl: string, en: string): string {
  return getLang() === 'pl' ? pl : en;
}
