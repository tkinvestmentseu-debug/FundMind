import { t } from "../../src/lib/translations";
import { useSettings } from "../../src/contexts/SettingsContext";
import React, { useMemo, useState } from "react";
import { SafeAreaView } from "react-native-safe-area-context";
import { ScrollView, View, Text, Pressable, useWindowDimensions, NativeSyntheticEvent, NativeScrollEvent } from "react-native";
import Ionicons from "@expo/vector-icons/Ionicons";
import { router } from "expo-router";

type Tile = { key: string; label: string; icon: string; href?: string };

function TileView(t: Tile, size: number) {
  return (
    <Pressable
      key={t.key}
      onPress={() => { if (t.href) router.push(t.href as any); }}
      style={{
        width: size, height: size, borderRadius: 16, backgroundColor: "#FFFFFF",
        borderWidth: 1, borderColor: "#E6EDF2", justifyContent: "center", alignItems: "center",
        marginBottom: 12, shadowColor: "#000", shadowOpacity: 0.06, shadowRadius: 8, shadowOffset: { width: 0, height: 2 },
      }}
    >
      <Ionicons name={t.icon as any} size={28} />
      <Text style={{ fontWeight: "700", textAlign: "center", marginTop: 6 }}>{t.label}</Text>
    </Pressable>
  );
}

export default function StartScreen() {
  const { lang } = useSettings();
  const { width } = useWindowDimensions();
  const [page, setPage] = useState(0);
  const gap = 12;
  const cols = 3;
  const tileSize = useMemo(() => {
    const horizontalPadding = 16 * 2;
    const totalGaps = gap * (cols - 1);
    return Math.floor((width - horizontalPadding - totalGaps) / cols);
  }, [width]);

  // PAGE 1 — finanse + Podróże/Notatki/Przypomnienia
  const tiles1: Tile[] = [
    { key: "add",      label: t(lang, "addTransaction"),   icon: "add-circle-outline",       href: "/addTransaction" },
    { key: "tx",       label: t(lang, "transactions"),         icon: "list-outline",             href: "/transactions" },
    { key: "bmonth",   label: t(lang, "monthlyBudget"),    icon: "briefcase-outline",        href: "/budgets/month" },
    { key: "insights", label: t(lang, "insights"),            icon: "bar-chart-outline",        href: "/insights" },
    { key: "goals",    label: t(lang, "goals"),               icon: "trophy-outline",           href: "/goals" },
    { key: "budgets",  label: t(lang, "budgets"),            icon: "pie-chart-outline",        href: "/budgets" },
    { key: "reports",  label: t(lang, "reports"),            icon: "document-text-outline",    href: "/reports" },
    { key: "quick",    label: t(lang, "quickSummary"), icon: "flash-outline",         href: "/summary" },
    { key: "calendar", label: t(lang, "calendar"),          icon: "calendar-outline",         href: "/(tabs)/calendar" },
    { key: "travel",   label: t(lang, "travel"),            icon: "airplane-outline",         href: "/travel" },
    { key: "notes",    label: t(lang, "notes"),            icon: "document-outline",         href: "/notes" },
    { key: "remind",   label: t(lang, "reminders"),      icon: "notifications-outline",    href: "/reminders" },
  ];

  // PAGE 2 — inwestycje + widgety
  const tiles2: Tile[] = [
    { key: "crypto",   label: t(lang, "crypto"),       icon: "logo-bitcoin",             href: "/crypto" },
    { key: "stocks",   label: t(lang, "stocks"),             icon: "trending-up-outline",      href: "/stocks" },
    { key: "cx",       label: t(lang, "cryptomarket"),      icon: "swap-vertical-outline",    href: "/crypto/exchange" },
    { key: "subs",     label: t(lang, "subs"),        icon: "card-outline",             href: "/subscriptions" },
    { key: "tax",      label: t(lang, "taxes"),            icon: "receipt-outline",          href: "/tax" },
    { key: "fx",       label: t(lang, "fx"),        icon: "cash-outline",             href: "/fx" },
  ];

  // Dummy data for widgets
  const budgetTotal = 4000;
  const budgetSpent = 1750;
  const budgetPct = Math.min(100, Math.round((budgetSpent / budgetTotal) * 100));
  const todaySpend = 63.50;
  const events = [
    { t: "Rata kredytu", d: "jutro 10:00" },
    { t: "Faktura #102", d: "pt 14:00" },
    { t: "Wizyta u dentysty", d: "pn 09:30" },
  ];

  const onScroll = (e: NativeSyntheticEvent<NativeScrollEvent>) => {
    const p = Math.round(e.nativeEvent.contentOffset.x / width);
    if (p !== page) setPage(p);
  };

  return (
    <SafeAreaView style={{ flex: 1, backgroundColor: "#FFFFFF" }}>
      <View style={{ paddingTop: 8, paddingHorizontal: 16 }}>
        <Text style={{ fontSize: 28, fontWeight: "800", color: "#7C3AED", textAlign: "center" }}>FundMind</Text>
      </View>

      <ScrollView
        horizontal
        pagingEnabled
        showsHorizontalScrollIndicator={false}
        onScroll={onScroll}
        scrollEventThrottle={16}
        style={{ flex: 1 }}
       contentContainerStyle={{ paddingBottom: 24 }}>
        {/* PAGE 1 */}
        <View style={{ width, paddingHorizontal: 16, paddingTop: 12 }}>
          {/* Budżet miesiąca widget */}
          <View style={{ backgroundColor: "#FFFFFF", borderRadius: 16, borderWidth: 1, borderColor: "#E6EDF2", padding: 16, marginBottom: 12 }}>
            <View style={{ flexDirection: "row", justifyContent: "space-between", marginBottom: 6 }}>
              <Text style={{ fontWeight: "700" }}>{t(lang, "monthlyBudget")}</Text>
              <Text style={{ fontWeight: "700" }}>{budgetPct}%</Text>
            </View>
            <View style={{ height: 10, backgroundColor: "#E6EDF2", borderRadius: 6, overflow: "hidden" }}>
              <View style={{ width: `${budgetPct}%`, height: "100%", backgroundColor: "#7C3AED" }} />
            </View>
            <Text style={{ opacity: 0.7, marginTop: 6 }}>{budgetSpent.toFixed(2)} / {budgetTotal.toFixed(2)} PLN</Text>
          </View>

          {/* kafelki */}
          <View style={{ flexDirection: "row", flexWrap: "wrap", justifyContent: "space-between" }}>
            {tiles1.map(t => TileView(t, tileSize))}
          </View>
        </View>

        {/* PAGE 2 */}
        <View style={{ width, paddingHorizontal: 16, paddingTop: 12 }}>
          {/* Dzisiejsze wydatki */}
          <View style={{ backgroundColor: "#FFFFFF", borderRadius: 16, borderWidth: 1, borderColor: "#E6EDF2", padding: 16, marginBottom: 12 }}>
            <Text style={{ fontWeight: "700", marginBottom: 6 }}>{t(lang, "todaysSpending")}</Text>
            <Text style={{ fontSize: 20, fontWeight: "800" }}>{todaySpend.toFixed(2)} PLN</Text>
          </View>

          {/* Nadchodzące zdarzenia */}
          <View style={{ backgroundColor: "#FFFFFF", borderRadius: 16, borderWidth: 1, borderColor: "#E6EDF2", padding: 16, marginBottom: 12 }}>
            <Text style={{ fontWeight: "700", marginBottom: 6 }}>{t(lang, "upcoming")}</Text>
            {events.map((e, i) => (
              <View key={i} style={{ flexDirection: "row", justifyContent: "space-between", marginTop: 4 }}>
                <Text>{e.t}</Text><Text style={{ opacity: 0.7 }}>{e.d}</Text>
              </View>
            ))}
          </View>

          <Text style={{ fontSize: 22, fontWeight: "800", marginBottom: 12 }}>{t(lang, "extraSections")}</Text>
          <View style={{ flexDirection: "row", flexWrap: "wrap", justifyContent: "space-between" }}>
            {tiles2.map(t => TileView(t, tileSize))}
          </View>
        </View>
      </ScrollView>

      <View style={{ flexDirection: "row", justifyContent: "center", marginBottom: 8 }}>
        {[0,1].map(i => (
          <View key={i} style={{
            width: 8, height: 8, borderRadius: 4, marginHorizontal: 4,
            backgroundColor: page === i ? "#7C3AED" : "#E6EDF2"
          }}/>
        ))}
      </View>

      <Pressable
        onPress={() => router.push("/ai" as any)}
        style={{
          marginHorizontal: 16, marginBottom: 12, padding: 14,
          borderRadius: 16, borderWidth: 1, borderColor: "#E6EDF2",
          backgroundColor: "#FFFFFF", alignItems: "center"
        }}
      >
        <Text style={{ fontWeight: "700" }}>{t(lang, "goToAI")}</Text>
      </Pressable>
    </SafeAreaView>
  );
}





