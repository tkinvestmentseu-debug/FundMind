import React, { useEffect, useMemo } from "react";
import i18n from "../../src/lib/i18n";
let useSettings: undefined | (() => { language?: string }) = undefined;
try { useSettings = require("../../src/contexts/SettingsContext").useSettings; } catch {}

type Props = { children?: React.ReactNode };

// Prosty context – sama zmiana value wymusi rerender całego drzewa
const LangCtx = React.createContext<string | undefined>(undefined);
export const useLang = () => React.useContext(LangCtx);

export default function I18nGate({ children }: Props) {
  const lang = (() => {
    try {
      if (useSettings) { const s = useSettings(); return (s?.language as "pl" | "en") || "pl"; }
    } catch {}
    return (i18n.language as "pl" | "en") || "pl";
  })();

  useEffect(() => {
    const next = (lang || "pl") as "pl" | "en";
    if (i18n.language !== next) {
      try { i18n.reloadResources(); } catch {}
      i18n.changeLanguage(next).catch(() => {});
    }
  }, [lang]);

  // Value w providerze powoduje rerender potomków przy zmianie języka
  const value = useMemo(() => lang, [lang]);
  return <LangCtx.Provider value={value}>{children ?? null}</LangCtx.Provider>;
}
